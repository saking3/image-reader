"""
Created on Tue Apr  7 09:41:41 2020
@author: Sarah King
description: File will pull and analyze all .tifs from a directory, quantifying 
             how many of them fit certain conditions.
             .csv file will be created with final results of analysis. 
             In the command prompt, you must enter a file directory (as a string), 
             and whether or not you want to run a bitonal test(Y/N), a color
             test (Y/N), and a grayscale test (Y/N). Errors for each image are printed
             according to the image type the 'Image BitsPerSample' corresponds to,
             except in the case where it doesn't correspond to a test being run. In 
             such a case, a grayscale and color BitsPerSample defaults to the other test, 
             and a bitonal BitsPerSample defaults to the grayscale test
             
example cmd input: exifreader.py "C:\\Users\Sarah\Documents\failure test set" y Y n 
"""

import os
import exifread 
import argparse 
import csv 


# cmd user inputs
#user is able to initially input a file director and the types of 
#analyses they would like to run on the file
parser = argparse.ArgumentParser()
parser.add_argument("directory", type=str,
                    help="Enter a directory. Please use quotation marks around it!")
parser.add_argument("bitonal", type=str.lower,
                    help="Would you like to test for bitonal images? Enter Y/N")
parser.add_argument("color", type=str.lower,
                    help="Would you like to test for color images? Enter Y/N")
parser.add_argument("grayscale", type=str.lower,
                    help="Would you like to test for grayscale images? Enter Y/N.")
args = parser.parse_args()
directory = args.directory 

#bitonal desired fields
bitonal_fields = {'Image BitsPerSample': '1',
                  'Image Compression': 'T6/Group 4 Fax',
                  'Image XResolution': '600',
                  'Image YResolution': '600'}
#color image desired fields
color_fields = {'Image BitsPerSample': '[8, 8, 8]', 
                'Image Compression': 'Uncompressed', 
                'Image XResolution': '400', 
                'Image YResolution': '400'}
#grayscale desired fields 
grayscale_fields = {'Image BitsPerSample': '8', 
                    'Image Compression': 'Uncompressed', 
                    'Image XResolution': '400', 
                    'Image YResolution': '400'}
        
bitonal_count = 0 #total number of bitonal images
color_count = 0 #total number of color images
grayscale_count = 0 #total number of grayscale images
error_count = 0 #number of files that fail the selected test

#this creates and saves a csv to the same location as the inputted directory
w = csv.writer(open(directory + ".csv", "w"))

#this creates a key at the top of the .csv with the expected data for each test
w.writerow(["bitonal exif data"] + ['Image BitsPerSample: ' + str(bitonal_fields['Image BitsPerSample'])] +  
           ['Image Compression: ' + str(bitonal_fields['Image Compression'])] + ['Image XResolution: ' + str(bitonal_fields['Image XResolution'])] +
           ['Image YResolution: ' + str(bitonal_fields['Image YResolution'])])
w.writerow(["color exif data"] + ['Image BitsPerSample: ' + str(color_fields['Image BitsPerSample'])] +  
           ['Image Compression: ' + str(color_fields['Image Compression'])] + ['Image XResolution: ' + str(color_fields['Image XResolution'])] +
           ['Image YResolution: ' + str(color_fields['Image YResolution'])])
w.writerow(["grayscale exif data"] + ['Image BitsPerSample: ' + str(grayscale_fields['Image BitsPerSample'])] +  
           ['Image Compression: ' + str(grayscale_fields['Image Compression'])] + ['Image XResolution: ' + str(grayscale_fields['Image XResolution'])] +
           ['Image YResolution: ' + str(grayscale_fields['Image YResolution'])])
        
#for each file in the directory, this will run the selected test and tell you
#which images are of which type. non .tifs are skipped entirely. 
for (root, dirs, files) in os.walk(directory):
    for f in files: 
        bitonal_error = False #these failed the bitonal test somehow        
        color_error = False #these failed the color test somehow
        grayscale_error = False #these failed the grayscale test somehow 
        #counts the number of key/value pairs that match for each .tif
        bitonal_check = 0 
        color_check = 0
        grayscale_check = 0 
        full_file_path = os.path.join(root, f) 
        fname, fextension = os.path.splitext(full_file_path)
        print("Inspecting file: {0}".format(full_file_path))
        
        if fextension == ".tif":
            image = open(full_file_path, 'rb')
            tags = exifread.process_file(image) #returns exif tags 
            image.close() 
            
            #this runs all 3 tests. CHECKED AND WORKS
            if args.bitonal == "y" and args.color == "y" and args.grayscale == "y": 
                bitonal_error = False #these failed the bitonal test somehow        
                color_error = False #these failed the color test somehow
                grayscale_error = False #these failed the grayscale test somehow
                for key, value in bitonal_fields.items(): 
                    if key not in tags: #tag is missing from exifdata!
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error = True 
                        break
                    if value == str(tags[key]): #key and data have matched 
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else: #key is present but value does not match 
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error = True  
                        break
                    bitonal_check +=1
                print("File matched: {0}".format(f))
                
                for key, value in color_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error = True
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error = True
                        break
                    color_check += 1
                print("File matched: {0}".format(f))
                
                for key, value in grayscale_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error = True 
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f)) 
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error = True
                        break
                    grayscale_check += 1
                print("File matched: {0}".format(f))  
                
                if bitonal_error == True and color_error == True and grayscale_error == True:
                    error_count += 1 
                    print("error count: " + str(error_count))
                    print(str(full_file_path + " failed all tests"))
                    #bitonal
                    w.writerow([full_file_path + " has the following errors: "])
                    if str(tags['Image BitsPerSample']) == bitonal_fields['Image BitsPerSample'] :  
                        if str(tags['Image BitsPerSample']) != bitonal_fields['Image BitsPerSample'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: '1'"])
                        if str(tags['Image Compression']) != bitonal_fields['Image Compression'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'T6/Group 4 Fax\'"])                
                        if str(tags['Image XResolution']) != bitonal_fields['Image XResolution'] :
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'600\'"])
                        if str(tags['Image YResolution']) != bitonal_fields['Image YResolution'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'600\'"])
                    #color
                    elif str(tags['Image BitsPerSample']) == color_fields['Image BitsPerSample']: 
                        if str(tags['Image BitsPerSample']) != color_fields['Image BitsPerSample'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: \'[8, 8, 8]\'"])
                        if str(tags['Image Compression']) != color_fields['Image Compression'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'Uncompressed\'"])
                        if str(tags['Image XResolution']) != color_fields['Image XResolution'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'400\'"])
                        if str(tags['Image YResolution']) != color_fields['Image YResolution'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'400\'"])
                    
                    #grayscale 
                    elif str(tags['Image BitsPerSample']) == grayscale_fields['Image BitsPerSample'] : 
                        if str(tags['Image BitsPerSample']) != grayscale_fields['Image BitsPerSample'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: \'8\'"])
                        if str(tags['Image Compression']) != grayscale_fields['Image Compression'] :
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'Uncompressed\'"])
                        if str(tags['Image XResolution']) != grayscale_fields['Image XResolution'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'400\'"])
                        if str(tags['Image YResolution']) != grayscale_fields['Image YResolution'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'400\'"])
                    
                    else : 
                        w.writerow(["Image BitsPerSample " + str(tags['Image BitsPerSample']) + " does not match any known test"])
                    
                if bitonal_check == 4 :
                    bitonal_count +=1 
                elif bitonal_check != 4 : 
                    bitonal_check = 0
                    
                if color_check == 4 :
                    color_count += 1
                elif color_check != 4: 
                    color_check = 0 
                    
                if grayscale_check == 4 :
                    grayscale_count += 1
                elif grayscale_check != 4: 
                    grayscale_check = 0  
            
            #this runs the bitonal and color test
            elif args.bitonal == "y" and args.color == "y" and args.grayscale == "n":
                for key, value in bitonal_fields.items():
                    if key not in tags: #tag is missing from exifdata!
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error = True 
                        break
                    if value == str(tags[key]): #key and data have matched 
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else: #key is present but value does not match 
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error = True  
                        break
                    bitonal_check +=1
                print("File matched: {0}".format(f))
                
                for key, value in color_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error = True
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error = True
                        break
                    color_check += 1
                print("File matched: {0}".format(f))
                
                if bitonal_error == True and color_error == True:
                    error_count += 1 
                    print(str(full_file_path + " failed all tests"))
                    w.writerow([full_file_path + " has the following errors:"])
                    #bitonal errors
                    if str(tags['Image BitsPerSample']) == bitonal_fields['Image BitsPerSample']:  
                        if str(tags['Image BitsPerSample']) != bitonal_fields['Image BitsPerSample'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: '1'"])
                        if str(tags['Image Compression']) != bitonal_fields['Image Compression'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'T6/Group 4 Fax\'"])                
                        if str(tags['Image XResolution']) != bitonal_fields['Image XResolution'] :
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'600\'"])
                        if str(tags['Image YResolution']) != bitonal_fields['Image YResolution'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'600\'"])
                    #color and grayscale get checked as color
                    elif str(tags['Image BitsPerSample']) == color_fields['Image BitsPerSample'] or str(tags['Image BitsPerSample']) == grayscale_fields['Image BitsPerSample']: 
                        if str(tags['Image BitsPerSample']) != color_fields['Image BitsPerSample'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: \'[8, 8, 8]\'"])
                        if str(tags['Image Compression']) != color_fields['Image Compression'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'Uncompressed\'"])
                        if str(tags['Image XResolution']) != color_fields['Image XResolution'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'400\'"])
                        if str(tags['Image YResolution']) != color_fields['Image YResolution'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'400\'"])
                    #not color, bitonal, or grayscale
                    else : 
                        w.writerow(["Image BitsPerSample " + str(tags['Image BitsPerSample']) + " does not match any known test"])
                    
                if bitonal_check == 4 :
                    bitonal_count +=1 
                elif bitonal_check != 4 : 
                    bitonal_check = 0
                    
                if color_check == 4 :
                    color_count += 1
                elif color_check != 4: 
                    color_check = 0 
            
            #this runs the bitonal and grayscale test
            elif args.bitonal == "y" and args.color == "n" and args.grayscale == "y": 
                for key, value in bitonal_fields.items():
                    if key not in tags: #tag is missing from exifdata!
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error = True 
                        break
                    if value == str(tags[key]): #key and data have matched 
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else: #key is present but value does not match 
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error = True  
                        break
                    bitonal_check +=1
                print("File matched: {0}".format(f))
                
                for key, value in grayscale_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error = True 
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f)) 
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error = True
                        break
                    grayscale_check += 1
                print("File matched: {0}".format(f))  
                
                if bitonal_error == True and grayscale_error == True:
                    error_count += 1 
                    print(str(full_file_path + " failed both tests"))
                    w.writerow([full_file_path + " has the following errors: "])
                    #bitonal 
                    if str(tags['Image BitsPerSample']) == bitonal_fields['Image BitsPerSample']:  
                        if str(tags['Image BitsPerSample']) != bitonal_fields['Image BitsPerSample'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: '1'"])
                        if str(tags['Image Compression']) != bitonal_fields['Image Compression'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: 'T6/Group 4 Fax'"])                
                        if str(tags['Image XResolution']) != bitonal_fields['Image XResolution'] :
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: '600'"])
                        if str(tags['Image YResolution']) != bitonal_fields['Image YResolution'] : 
                            w.writerow(['bitonal error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: '600'"])
                    #grayscale and color get tested as grayscale
                    elif str(tags['Image BitsPerSample']) == grayscale_fields['Image BitsPerSample'] or str(tags['Image BitsPerSample']) == color_fields['Image BitsPerSample']: 
                        if str(tags['Image BitsPerSample']) != grayscale_fields['Image BitsPerSample'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: \'8\'"])
                        if str(tags['Image Compression']) != grayscale_fields['Image Compression'] :
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'Uncompressed\'"])
                        if str(tags['Image XResolution']) != grayscale_fields['Image XResolution'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'400\'"])
                        if str(tags['Image YResolution']) != grayscale_fields['Image YResolution'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'400\'"])
                    #not color, bitonal, or grayscale
                    else : 
                        w.writerow(["Image BitsPerSample " + str(tags['Image BitsPerSample']) + " does not match any known test"])
                    
                if bitonal_check == 4 :
                    bitonal_count +=1 
                elif bitonal_check != 4 : 
                    bitonal_check = 0
                    
                if grayscale_check == 4 :
                    grayscale_count += 1
                elif grayscale_check != 4: 
                    grayscale_check = 0 
            
            #this runs the color and grayscale test
            elif args.bitonal == 'n' and args.color == 'y' and args.grayscale == 'y': 
                for key, value in color_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error = True
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error = True
                        break
                    color_check += 1
                print("File matched: {0}".format(f))
                
                for key, value in grayscale_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error = True 
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f)) 
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error = True
                        break
                    grayscale_check += 1
                print("File matched: {0}".format(f))  
                
                if color_error == True and grayscale_error == True:
                    error_count += 1 
                    print(str(full_file_path + " failed both tests"))
                    w.writerow(["failed all tests"] + [full_file_path])
                    #color
                    if str(tags['Image BitsPerSample']) == color_fields['Image BitsPerSample'] : 
                        if str(tags['Image BitsPerSample']) != color_fields['Image BitsPerSample'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: \'[8, 8, 8]\'"])
                        if str(tags['Image Compression']) != color_fields['Image Compression'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'Uncompressed\'"])
                        if str(tags['Image XResolution']) != color_fields['Image XResolution'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'400\'"])
                        if str(tags['Image YResolution']) != color_fields['Image YResolution'] : 
                            w.writerow(['color error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'400\'"])
                    #grayscale and bitonal get checked as grayscale
                    elif str(tags['Image BitsPerSample']) == grayscale_fields['Image BitsPerSample'] or str(tags['Image BitsPerSample']) == bitonal_fields['Image BitsPerSample'] : 
                        if str(tags['Image BitsPerSample']) != grayscale_fields['Image BitsPerSample'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: \'8\'"])
                        if str(tags['Image Compression']) != grayscale_fields['Image Compression'] :
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'Uncompressed\'"])
                        if str(tags['Image XResolution']) != grayscale_fields['Image XResolution'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'400\'"])
                        if str(tags['Image YResolution']) != grayscale_fields['Image YResolution'] : 
                            w.writerow(['grayscale error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'400\'"])
                    #not color, bitonal, or grayscale
                    else : 
                        w.writerow(["Image BitsPerSample " + str(tags['Image BitsPerSample']) + " does not match any known test"])
                     
                if color_check == 4 :
                    color_count += 1
                elif color_check != 4: 
                    color_check = 0 
                    
                if grayscale_check == 4 :
                    grayscale_count += 1
                elif grayscale_check != 4: 
                    grayscale_check = 0  
                    
            #this runs just the bitonal test
            elif args.bitonal == 'y' and args.grayscale == 'n' and args.color == "n": 
                for key, value in bitonal_fields.items():
                    bitonal_error = False
                    if key not in tags: #tag is missing from exifdata!
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error = True 
                        break
                    if value == str(tags[key]): #key and data have matched 
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else: #key is present but value does not match 
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error = True
                        break
                    bitonal_check +=1
                print("File matched: {0}".format(f))
                
                if bitonal_error == True :
                    error_count += 1 
                    print(str(full_file_path + " failed the bitonal test"))
                    #bitonal
                    w.writerow([full_file_path + " has the following errors: "])
                    if str(tags['Image BitsPerSample']) != bitonal_fields['Image BitsPerSample'] : 
                        w.writerow(['bitonal error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: '1'"])
                    if str(tags['Image Compression']) != bitonal_fields['Image Compression'] : 
                        w.writerow(['bitonal error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'T6/Group 4 Fax\'"])                
                    if str(tags['Image XResolution']) != bitonal_fields['Image XResolution'] :
                        w.writerow(['bitonal error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'600\'"])
                    if str(tags['Image YResolution']) != bitonal_fields['Image YResolution'] : 
                        w.writerow(['bitonal error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'600\'"])
            
                if bitonal_check == 4 :
                    bitonal_count +=1 
                elif bitonal_check != 4 : 
                    bitonal_check = 0
            
            #this runs just the color test
            elif args.color == 'y' and args.bitonal == 'n' and args.grayscale == 'n':
                for key, value in color_fields.items():
                    colo_error = False
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error = True
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error = True
                        break
                    color_check += 1
                print("File matched: {0}".format(f))
                 
                if color_error == True :
                    error_count += 1 
                    print(str(full_file_path + " failed the color test"))
                    w.writerow([full_file_path + " has the following errors: "])
                    if str(tags['Image BitsPerSample']) != color_fields['Image BitsPerSample'] : 
                        w.writerow(['color error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: \'[8, 8, 8]\'"])
                    if str(tags['Image Compression']) != color_fields['Image Compression'] : 
                        w.writerow(['color error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'Uncompressed\'"])
                    if str(tags['Image XResolution']) != color_fields['Image XResolution'] : 
                        w.writerow(['color error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'400\'"])
                    if str(tags['Image YResolution']) != color_fields['Image YResolution'] : 
                        w.writerow(['color error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'400\'"])

            
                if color_check == 4 :
                    color_count += 1
                elif color_check != 4: 
                    color_check = 0 
            
            #this runs just the grayscale test. 
            elif args.grayscale == 'y' and args.bitonal == 'n' and args.color == 'n': 
                grayscale_error = False 
                for key, value in grayscale_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error = True  
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f)) 
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error = True
                        break  
                    grayscale_check += 1
                print("File matched: {0}".format(f))
                
                if grayscale_error == True :
                    error_count += 1 
                    print(str(full_file_path + " failed the grayscale test"))
                    w.writerow([full_file_path + " has the following errors:"])
                    if str(tags['Image BitsPerSample']) != grayscale_fields['Image BitsPerSample'] : 
                        w.writerow(['grayscale error'] + ["value " + str(tags['Image BitsPerSample']) + " in file does not match desired Image BitsPerSample: \'8\'"])
                    if str(tags['Image Compression']) != grayscale_fields['Image Compression'] :
                        w.writerow(['grayscale error'] + ["value " + str(tags['Image Compression']) + " in file does not match desired Image Compression: \'Uncompressed\'"])
                    if str(tags['Image XResolution']) != grayscale_fields['Image XResolution'] : 
                        w.writerow(['grayscale error'] + ["value " + str(tags['Image XResolution']) + " in file does not match desired Image XResolution: \'400\'"])
                    if str(tags['Image YResolution']) != grayscale_fields['Image YResolution'] : 
                        w.writerow(['grayscale error'] + ["value " + str(tags['Image YResolution']) + " in file does not match desired Image YResolution: \'400\'"])
                
                if grayscale_check == 4 :
                    grayscale_count += 1
                elif grayscale_check != 4: 
                    grayscale_check = 0  
                     
        else:
            print("File is not in .tif format")
        
print("error_count = " + str(error_count))
print("bitonal_count = " + str(bitonal_count))
print("color_count = " + str(color_count))
print("grayscale_count = " + str(grayscale_count)) 
      
w.writerow(["error_count = "] + [str(error_count)])
w.writerow(["bitonal_count = "] + [str(bitonal_count)])
w.writerow(["color_count = "] + [str(color_count)])
w.writerow(["grayscale_count = "] + [str(grayscale_count)])           

