"""
Created on Tue Apr  7 09:41:41 2020
@author: Sarah King
description: File will pull and analyze all .tifs from a directory, quantifying how many of them fit certain conditions.
             .csv file will be created with final results of analysis. 
"""

import os
import exifread
import sys
import csv 
import argparse 

# cmd user inputs
#user is able to initially input a file director and the types of 
#analyses they would like to run on the file
parser = argparse.ArgumentParser()
parser.add_argument("directory", type=str,
                    help="Enter a directory. Please use quotation marks around it!")
parser.add_argument("bitonal", type=bool,
                    help="Would you like to test for bitonal images? Enter True or False.")
parser.add_argument("color", type=bool,
                    help="Would you like to test for color images? Enter True or False.")
parser.add_argument("grayscale", type=bool,
                    help="Would you like to test for grayscale images? Enter True or False.")
args = parser.parse_args()
directory = args.directory 


#os.chdir("C:/Users/Sarah/Downloads")
#directory = "C:/Users/Sarah/Downloads/39352007273741" 

#bitonal desired fields
bitonal_fields = {'Image BitsPerSample': '1',
                  'Image Compression': 'T6/Group 4 Fax',
                  'Image XResolution': '600',
                  'Image YResolution': '600'}

#color image desired fields
color_fields = {'Image BitsPerSample': '8,8,8', 
                'Image Compression': 'Uncompressed', 
                'Image XResolution': '400', 
                'Image YResolution': '400'}

#grayscale desired fields 
grayscale_fields = {'Image BitsPerSample': '8', 
                    'Image Compression': 'Uncompressed', 
                    'Image XResolution': '400', 
                    'Image YResolution': '400'}
        

# take files in the inputted directory, prints all exifdata for tifs and
#prints a list of all tifs  
for (root, dirs, files) in os.walk(directory):
    for f in files: 
        bitonal_count = 0
        color_count = 0
        grayscale_count = 0 
        error_count = 0
        full_file_path = os.path.join(directory, f) 
        fname, fextension = os.path.splitext(full_file_path)
        print("Inspecting file: {0}".format(full_file_path))
        if fextension == ".tif":
            image = open(full_file_path, 'rb')
            tags = exifread.process_file(image) #returns exif tags 
            image.close()
            
            #edit the file path to save the document to the folder you want
            w = open("C:/Users/Sarah/Documents/" + fname + ".csv","w") #writing to .csv
            
            if args.bitonal == True: 
                for key, value in bitonal_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        error_count += 1 
                        w = open("C:/Users/Sarah/Documents/" + f + ".csv","w") #writing to .txt
                        w.writerow(full_file_path)
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                        bitonal_count += 1
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        error_count += 1 
                        w.writerow(full_file_path)
                        break
                print("File matched: {0}".format(f))
            else:
                pass
            
            if args.color == True: 
                for key, value in color_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        error_count += 1
                        w.writerow(full_file_path)
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                        color_count += 1 
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        error_count += 1
                        w.writerow(full_file_path)
                        break
                print("File matched: {0}".format(f))
            else:
                pass
            
            if args.grayscale == True: 
                for key, value in grayscale_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        error_count += 1
                        w.writerow(full_file_path)
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                        grayscale_count += 1 
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        error_count += 1
                        w.writerow(full_file_path)
                        break
                    print("File matched: {0}".format(f))
            else:
                pass
            
        else:
            error_count += 1
            w.writerow(full_file_path)
            print("File is not in .tif format")
        
        w.writerow("error_count = " + error_count)
        w.writerow("bitonal_count = " + bitonal_count)
        w.writerow("color_count = " + color_count)
        w.writerow("grayscale_count = " + grayscale_count) 
