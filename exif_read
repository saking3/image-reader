"""
Created on Tue Apr  7 09:41:41 2020
@author: Sarah King
description: File will pull and analyze all .tifs from a directory, quantifying how many of them fit certain conditions.
             .csv file will be created with final results of analysis. 
"""

import os
import exifread 
import argparse 
import csv 

# cmd user inputs
#user is able to initially input a file director and the types of 
#analyses they would like to run on the file
parser = argparse.ArgumentParser()
parser.add_argument("directory", type=str,
                    help="Enter a directory. Please use quotation marks around it!")
parser.add_argument("bitonal", type=bool,
                    help="Would you like to test for bitonal images? Enter True or False.")
parser.add_argument("color", type=bool,
                    help="Would you like to test for color images? Enter True or False.")
parser.add_argument("grayscale", type=bool,
                    help="Would you like to test for grayscale images? Enter True or False.")
args = parser.parse_args()
directory = args.directory 

#bitonal desired fields
bitonal_fields = {'Image BitsPerSample': '1',
                  'Image Compression': 'T6/Group 4 Fax',
                  'Image XResolution': '600',
                  'Image YResolution': '600'}
#color image desired fields
color_fields = {'Image BitsPerSample': '8,8,8', 
                'Image Compression': 'Uncompressed', 
                'Image XResolution': '400', 
                'Image YResolution': '400'}
#grayscale desired fields 
grayscale_fields = {'Image BitsPerSample': '8', 
                    'Image Compression': 'Uncompressed', 
                    'Image XResolution': '400', 
                    'Image YResolution': '400'}
        
bitonal_count = 0 #total number of bitonal images
color_count = 0 #total number of color images
grayscale_count = 0 #total number of grayscale images
bitonal_error_count = 0 #these failed the bitonal test somehow        
color_error_count = 0 #these failed the color test somehow
grayscale_error_count = 0 #these failed the grayscale test somehow 

#edit the file path to save the document to the folder you want
w = csv.writer(open(directory + ".csv", "w")) #writing to .csv
        
# take files in the inputted directory, prints all exifdata for tifs and
#prints a list of all tifs  
for (root, dirs, files) in os.walk(directory):
    for f in files: 
        full_file_path = os.path.join(root, f) 
        fname, fextension = os.path.splitext(full_file_path)
        print("Inspecting file: {0}".format(full_file_path))
        
        if fextension == ".tif":
            image = open(full_file_path, 'rb')
            tags = exifread.process_file(image) #returns exif tags 
            image.close() 
            
            if args.bitonal == True: 
                for key, value in bitonal_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error_count += 1 
                        #w.writerow(["failed bitonal test"] + ["missing key: " + str(key)] + [full_file_path])
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        bitonal_error_count += 1 
                        #w.writerow(["failed bitonal test"] + 
                                   #["value " + str(tags[key]) + " in file does not match desired key, value: "  + str(key) + ", " + str(value)] + 
                                   #[full_file_path])
                        break
                    bitonal_count += 1
                print("File matched: {0}".format(f))
            else:
                pass
            
            if args.color == True: 
                for key, value in color_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error_count += 1
                        #w.writerow(["failed color test"] + ["missing key: " + str(key)] + [full_file_path])
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        color_error_count += 1
                        #w.writerow(["failed color test"] + 
                                   #["value " + str(tags[key]) + " in file does not match desired key, value: "  + str(key) + ", " + str(value)] + 
                                   #[full_file_path])
                        break
                    color_count += 1 
                print("File matched: {0}".format(f))
            else:
                pass
            
            if args.grayscale == True: 
                for key, value in grayscale_fields.items():
                    if key not in tags:
                        print("Did not find field {0}, halting processing of file: {1}".format(key, f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error_count += 1
                        #w.writerow(["failed grayscale test"] + ["missing key: " + str(key)] + [full_file_path])
                        break
                    if value == str(tags[key]):
                        print("Found match of key: {0} and value: {1} in file {2}".format(key, value, f))
                    else:
                        print("Field {0} with value {1} does not match, halting processing of file {2}".format(key,str(tags[key]), f))
                        print("Halted processing of file {0} with exif headers: {1}".format(f, tags))
                        grayscale_error_count += 1
                        #w.writerow(["failed grayscale test"] + 
                                   #["value " + str(tags[key]) + " in file does not match desired key, value: "  + str(key) + ", " + str(value)] + 
                                   #[full_file_path])
                        break
                    grayscale_count += 1
                print("File matched: {0}".format(f))
            else:
                pass
            
        else:
            print("File is not in .tif format")
        
print("bitonal_error_count = " + str(bitonal_error_count))
print("color_error_count = " + str(color_error_count))
print("grayscale_error_count = " + str(grayscale_error_count))
print("bitonal_count = " + str(bitonal_count / 4))
print("color_count = " + str(color_count / 4))
print("grayscale_count = " + str(grayscale_count / 4)) 
      
w.writerow(["bitonal_error_count = "] + [str(bitonal_error_count)])
w.writerow(["color_error_count = "] + [str(color_error_count)])
w.writerow(["grayscale_error_count = "] + [str(grayscale_error_count)])
w.writerow(["bitonal_count = "] + [str(bitonal_count / 4)])
w.writerow(["color_count = "] + [str(color_count / 4)])
w.writerow(["grayscale_count = "] + [str(grayscale_count / 4)])                 
